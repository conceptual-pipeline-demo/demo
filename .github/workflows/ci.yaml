name: Continuous integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  AWS_ROLE_ARN: arn:aws:iam::160071257600:role/conceptual-pipeline-deployment
  AWS_ACCOUNT_ID: 160071257600
  AWS_ECR_REPO: conceptual-pipeline-conceptual-pipeline-demo-repo

permissions:
  id-token: write # Allow connections to AWS
  contents: read # Allow access to repository contents

jobs:
  vulnerability_scan:
    name: Run OWASP dependency vulnerability scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'
          cache-dependency-path: |
            **/*.gradle*
            **/gradle-wrapper.properties
      - name: Cache NVD database
        uses: actions/cache@v4
        with:
          path: |
            owasp
          key: ${{ runner.os }}-NVD-database
      - name: Run the dependency check gradle task
        run: ./gradlew clean dependencyCheckAnalyze
        shell: bash
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

  build_artifacts:
    name: Build artifacts
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'
          cache-dependency-path: |
            **/*.gradle*
            **/gradle-wrapper.properties
      - name: Run build
        uses: ./.github/actions/gradle_build
        with:
          working-dir: ./
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: infra-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push docker image to Amazon ECR
        run: |
          DOCKER_BUILDKIT=1 docker buildx build . \
              --file Dockerfile \
              --platform linux/amd64,linux/arm64 \
              --tag ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{env.AWS_ECR_REPO}}:${{ github.sha }} \
              --push
        shell: bash
      - name: Upload test coverage reports
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          flags: unit_tests
          directory: ./build/reports/jacoco/test/
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  deploy_dev:
    name: Deploy to dev
    runs-on: ubuntu-latest
    environment: dev
    needs:
      - build_artifacts
      - vulnerability_scan
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: infra-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get Latest Image tag
        id: get_image_tag
        run: |
          TAG=$(aws ecr describe-images --repository-name ${{env.AWS_ECR_REPO}} --region ${{ env.AWS_REGION }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
          echo "Latest image tag: $TAG"
          echo "::set-output name=image_tag::$TAG"
      - name: helm deploy
        uses: ./.github/actions/helm-deploy
        with:
          namespace: dev
          aws-role-arn: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          image-repo: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{env.AWS_ECR_REPO}}
          image-tag: ${{ steps.get_image_tag.outputs.image_tag }}
          db-username: ${{secrets.SPRING_DATASOURCE_USERNAME}}
          db-password: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
          db-url: ${{vars.SPRING_DATASOURCE_URL}}
