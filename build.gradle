plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.avast.gradle.docker-compose' version '0.16.11'
    id 'org.owasp.dependencycheck' version "9.2.0"
    id 'jacoco'
    id 'com.github.spotbugs' version '6.0.10'
    id 'checkstyle'
}

group = 'com.conceptual.pipeline'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.1")
    set('testContainersVersion', "1.17.6")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:spring-mock-mvc'
    testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

dockerCompose {
    useComposeFiles = ["${projectDir}/docker/docker-compose-postgres.yml"]
    isRequiredBy(bootRun)
}

// owasp dependency check
dependencyCheck {
    formats = ['HTML', 'JSON']
    outputDirectory = "${buildDir}/reports/dependency-check"
    scanConfigurations = ['runtimeClasspath', 'testRuntimeClasspath']
    failBuildOnCVSS = 0
    if (System.getenv('NVD_API_KEY') != null) {
        nvd {
            apiKey = System.getenv('NVD_API_KEY')
            delay = 10000
        }
    }

    data {
        directory = "${rootDir}/owasp"
    }
}

// spotbugs vulnerability check
spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("${buildDir}/reports/spotbugs/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

// checkstyle code style check
checkstyle {
    toolVersion = "10.17.0"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}

tasks.check {
    dependsOn checkstyleMain
    dependsOn checkstyleTest
    dependsOn spotbugsMain
//    dependsOn dependencyCheckAnalyze
    dependsOn jacocoTestReport
}
